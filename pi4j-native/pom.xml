<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- MAVEN ARTIFACT INFORMATION -->
	<artifactId>pi4j-native</artifactId>
	<name>Pi4J :: JNI Native Library</name>
	<description>Pi4J JNI Native Library</description>
	<packaging>pom</packaging>
	<parent>
		<groupId>com.pi4j</groupId>
		<artifactId>pi4j-parent</artifactId>
		<version>0.0.2-SNAPSHOT</version>
	</parent>

	<!-- BUILD PROFILES -->
	<profiles>

		<!-- This profile is used to dynamically rebuild the native library .H 
			header files from the defined JNI jar classes. This profile should only be 
			used when changes have been made to the JNI Java wrapper classes and new 
			native method signatures are required. To use this profile, simply include 
			the "-generate-jni-headers" command argument with the maven build command. -->
		<profile>
			<id>generate-jni-headers</id>

			<!-- SPECIAL PROFILE DEPENDENCIES -->
			<dependencies>

				<!-- we define the pi4j Java project as a dependency so that the .H header 
					files can be generated based on the Java native wrapper classes -->
				<dependency>
					<groupId>com.pi4j</groupId>
					<artifactId>pi4j-core</artifactId>
					<version>${project.version}</version>
					<scope>compile</scope>
				</dependency>

			</dependencies>

			<!-- SPECIAL PROFILE BUILD INSTRUCTIONS -->
			<build>
				<plugins>

					<!-- Generate .h header files for JNI wrapper -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>native-maven-plugin</artifactId>
						<extensions>true</extensions>
						<executions>
							<execution>
								<id>javah-generate</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>javah</goal>
								</goals>
								<configuration>

									<!-- trigger javah execution -->
									<javahClassNames>
										<javahClassName>com.pi4j.wiringpi.Gpio</javahClassName>
										<javahClassName>com.pi4j.wiringpi.GpioInterrupt</javahClassName>
										<javahClassName>com.pi4j.wiringpi.GpioUtil</javahClassName>
										<javahClassName>com.pi4j.wiringpi.Serial</javahClassName>
										<javahClassName>com.pi4j.wiringpi.Lcd</javahClassName>
										<javahClassName>com.pi4j.wiringpi.Shift</javahClassName>
										<javahClassName>com.pi4j.wiringpi.SoftPwm</javahClassName>
										<javahClassName>com.pi4j.wiringpi.Spi</javahClassName>
										<javahClassName>com.pi4j.wiringpi.Gertboard</javahClassName>
										<javahClassName>com.pi4j.wiringpi.Nes</javahClassName>
									</javahClassNames>

									<!-- enable additional javah interface in dependencies list -->
									<javahSearchJNIFromDependencies>true</javahSearchJNIFromDependencies>

									<!-- specify the output directory for generated header files -->
									<javahOutputDirectory>src/main/native</javahOutputDirectory>

								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>


	<!-- BUILD INSTRUCTIONS -->
	<build>
		<finalName>libpi4j</finalName>

		<plugins>

			<!-- GENERATE LICENSE HEADERS IN SOURCE FILES -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>

					<!-- ensure that a target directory has been created platform -->
					<execution>
						<id>generate-sources</id>
						<phase>generate-sources</phase>
						<configuration>
							<tasks>
								<mkdir dir="target" />
								<mkdir dir="target/classes" />
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>

					<!-- copy the native source files and compile them with gcc on the RaspberyPi 
						platform -->
					<execution>
						<id>build-native-so</id>
						<phase>compile</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<!-- ensure the target directory is empty on the Raspberry Pi -->
								<sshexec host="${pi.host}" port="${pi.port}" username="${pi.user}"
									password="${pi.password}" trust="true" failonerror="true"
									verbose="true" command="rm --recursive --force ${pi.dirBuildTemp}" />

								<!-- ensure the target directory exists on the Raspberry Pi -->
								<sshexec host="${pi.host}" port="${pi.port}" username="${pi.user}"
									password="${pi.password}" trust="true" failonerror="false"
									verbose="true" command="mkdir --parents ${pi.dirBuildTemp}/*" />

								<!-- copy all the necessary source files to the Raspberry Pi -->
								<scp todir="${pi.user}:${pi.password}@${pi.host}:${pi.dirBuildTemp}"
									port="${pi.port}" trust="true" verbose="true" failonerror="true">
									<fileset dir="src/main/native" />
								</scp>

								<!-- compile the 'lib4j.so' JNI native shared library on the Raspberry 
									Pi platform -->
								<sshexec host="${pi.host}" port="${pi.port}" username="${pi.user}"
									password="${pi.password}" trust="true" failonerror="true"
									verbose="true" command="cd /home/pi/pi4j-temp; make clean; make all" />

								<!-- copy the compiled 'lib4j.so' JNI native shared library back -->
								<scp
									file="${pi.user}:${pi.password}@${pi.host}:${pi.dirBuildTemp}/libpi4j.so"
									todir="${project.build.directory}/" port="${pi.port}" trust="true"
									verbose="true" failonerror="true">
								</scp>

								<!-- remove the temporary target directory from the Raspberry Pi -->
								<sshexec host="${pi.host}" port="${pi.port}" username="${pi.user}"
									password="${pi.password}" trust="true" failonerror="true"
									verbose="true" command="rm --recursive --force ${pi.dirBuildTemp}" />
							</tasks>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant-jsch</artifactId>
						<version>1.7.1</version>
					</dependency>
					<dependency>
						<groupId>com.jcraft</groupId>
						<artifactId>jsch</artifactId>
						<version>0.1.42</version>
					</dependency>
					<dependency>
						<groupId>ant-contrib</groupId>
						<artifactId>ant-contrib</artifactId>
						<version>20020829</version>
					</dependency>
				</dependencies>
			</plugin>

			<!-- ATTACH COMPILED NATIVE LIBRARY -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-artifacts</id>
						<phase>package</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<artifacts>
								<artifact>
									<file>${project.build.directory}/libpi4j.so</file>
									<type>so</type>
								</artifact>
							</artifacts>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>

		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											license-maven-plugin
										</artifactId>
										<versionRange>
											[1.3,)
										</versionRange>
										<goals>
											<goal>
												update-project-license
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>