/*
 * #%L
 * **********************************************************************
 * ORGANIZATION  :  Pi4J
 * PROJECT       :  Pi4J :: JNI Native Library
 * FILENAME      :  com_pi4j_jni_Serial.h  
 * 
 * This file is part of the Pi4J project. More information about 
 * this project can be found here:  http://www.pi4j.com/
 * **********************************************************************
 * %%
 * Copyright (C) 2012 - 2015 Pi4J
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_pi4j_jni_Serial */

#ifndef _Included_com_pi4j_jni_Serial
#define _Included_com_pi4j_jni_Serial
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_pi4j_jni_Serial
 * Method:    open
 * Signature: (Ljava/lang/String;IIIIIZZZ)I
 */
JNIEXPORT jint JNICALL Java_com_pi4j_jni_Serial_open
  (JNIEnv *, jclass, jstring, jint, jint, jint, jint, jint, jboolean, jboolean, jboolean);

/*
 * Class:     com_pi4j_jni_Serial
 * Method:    close
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_pi4j_jni_Serial_close
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_pi4j_jni_Serial
 * Method:    flush
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_pi4j_jni_Serial_flush__I
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_pi4j_jni_Serial
 * Method:    flush
 * Signature: (IZZ)V
 */
JNIEXPORT void JNICALL Java_com_pi4j_jni_Serial_flush__IZZ
  (JNIEnv *, jclass, jint, jboolean, jboolean);

/*
 * Class:     com_pi4j_jni_Serial
 * Method:    sendBreak
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_com_pi4j_jni_Serial_sendBreak
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     com_pi4j_jni_Serial
 * Method:    echo
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_com_pi4j_jni_Serial_echo
  (JNIEnv *, jclass, jint, jboolean);

/*
 * Class:     com_pi4j_jni_Serial
 * Method:    available
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_pi4j_jni_Serial_available
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_pi4j_jni_Serial
 * Method:    read
 * Signature: (I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_pi4j_jni_Serial_read__I
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_pi4j_jni_Serial
 * Method:    read
 * Signature: (II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_pi4j_jni_Serial_read__II
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     com_pi4j_jni_Serial
 * Method:    write
 * Signature: (I[BJ)V
 */
JNIEXPORT void JNICALL Java_com_pi4j_jni_Serial_write
  (JNIEnv *, jclass, jint, jbyteArray, jlong);

#ifdef __cplusplus
}
#endif
#endif
